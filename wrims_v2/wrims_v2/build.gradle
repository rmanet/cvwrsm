
plugins{
    id 'java'
    id 'antlr'
}

group 'gov.ca.dwr'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
    maven {
        url "https://oss.sonatype.org/content/repositories/releases"
    }
    maven {
        url 'https://www.hec.usace.army.mil/nexus/repository/maven-public'
    }
}

sourceSets {
    src {
        java{
            srcDir "src/main/java/"
        }
        antlr{
            srcDir "src/main/antlr/"
        }
    }
}

dependencies {
    antlr "org.antlr:antlr:3.5.2" // use ANTLR version 3

    implementation project(':mil-army-usace-hec-dependencies')

    implementation 'com.google.guava:guava:11.0.2'
    implementation 'commons-io:commons-io:2.1'
    implementation 'com.thoughtworks.xstream:xstream:1.4.3'
    implementation 'org.javatuples:javatuples:1.2'
    implementation 'de.danielbechler:java-object-diff:0.95'
    implementation 'org.testng:testng:6.3'
    implementation 'com.esotericsoftware.kryo:kryo:2.24.0'
    implementation 'black.ninia:jep:3.8.2'
    implementation 'org.tensorflow:libtensorflow:1.14.0'

    // It's not obvious which version of hdf-java is needed.
    // The packages in the local jars are
    // ncsa.hdf.hdf5lib
    // ncsa.hdf.object
    // ncsa.hdf.object.h5
    // implementation 'org.hdfgroup:hdf-java:2.6' from 2010 is present
    // at
    implementation files('lib_x64/jarhdf5-2.11.0.jar')
    implementation files('lib_x64/jarhdfobj.jar')
    implementation files('lib_x64/jarh5obj.jar')

    // The oldest implementation of Google's linearsolver in mavencentral appears to be
    // implementation 'com.google.ortools:ortools-java:8.2.9004'
    // from 20 April 2021.
    // The local jar file contents are from 2013, so we'll use the local jar
    // until we verify that a newer version will work.
    implementation files('lib/com.google.ortools.linearsolver.jar')

    implementation files('lib/coinor.jar')
    implementation files('lib/gurobi.jar')
    implementation files('lib/lpsolve55j.jar')
    implementation files('lib/XAOptimizer.jar')

    test  {
        useTestNG()
    }
}

// This moves .tokens files into the same generated-src files with the .java files
tasks.withType(AntlrTask) {
    println ("task name: " + name)
    if (name.startsWith('generate')) {
        doLast {
            println("// Copying .tokens files to corresponding java folders")
            copy {
                from "${buildDir}/generated-src/antlr/main"
                include '*Evaluator*.tokens'
                into "${buildDir}/generated-src/antlr/main/wrimsv2/evaluator/"
            }
            copy {
                from "${buildDir}/generated-src/antlr/main"
                include 'WreslTree*.tokens'
                into "${buildDir}/generated-src/antlr/main/wrimsv2/wreslparser/grammar/"
            }
            copy{
                from "${buildDir}/generated-src/antlr/main"
                include 'IncFileFinder.tokens'
                include 'WreslPlus.tokens'
                into "${buildDir}/generated-src/antlr/main/wrimsv2/wreslplus/grammar/"
            }
            delete "${buildDir}/generated-src/antlr/main/*.tokens"
        }
    }
}

